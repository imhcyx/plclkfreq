PL clock frequency driver for ZyForce
========================================

Introduction

This project consisting of a kernel-side driver and a user-side program
provides an interface for adjusting the frequency of PL0 clock on the
PS side of Xilinx ZynqMP. Operations including getting frequency,
setting frequency, enabling clock and disabling clock are implemented
for direct and immediate control of PL0 clock.


Principles

The driver accesses the of node fclk0 defined in the device tree (refer
to arch/arm64/boot/dts/xilinx/zynqmp-clk-ccf.dtsi) to get the PL0 clock.
Clock operations are implemented by using Linux CCF APIs. The interface
is exposed to user side by an ioctl interface provided by the driver.


Compilation

Linux kernel from Xilinx is required to build the kernel side driver.
In driver directory, customize Makefile to set KDIR to your linux
source code directory and run ``make`` to compile the driver. The
default output name is plclkfreq.ko.

User-side program can be compiled by using the following command in user
directory for a output name of plclkfreq:
aarch64-linux-gnu-gcc -o plclkfreq main.c


Usage

Load the driver by using ``insmod plclkfreq.ko`` on the target board.
Before running the user program, a device node located at /dev/plclkfreq
needs to be generated by using ``mknod /dev/plclkfreq c <major> <minor>``
where <major> and <minor> number can be found in the result of ``cat /proc/modules``
or the system journal (printed by the driver).

After setting up the driver, the user program plclkfreq can be used to
configure PL0 clock. Available commands are:

plclkfreq set <freq>  # set the clock frequency to <freq>
plclkfreq get         # get the clock frequency
plclkfreq enable      # enable the clock
plclkfreq disable     # disable the clock

Exit status of the command ($? in shell) should be checked to determine
whether the operation is successful.


Issues & Limitations

1. Settable frequency values are limited
Since PL clocks uses 2 dividers to adjust the frequency from source clocks
(each divider can be set to an integer in 1~63), the output freqency can
only be an integer fraction of the source frequency. For example, if the
upper bound of output frequency is 1500 MHz, available values are 1500,
1500/2, 1500/3, etc.

2. Issues when disabling the clock
When the PL clock is disabled, communications with the PL logic would cause
a bus deadlock and thus freeze the whole board. Be aware when trying to
disable the clock.

3. Unable to determine whether the clock is enabled
Due to Linux CCF, no public API is currently available to determine the state
of a clock.

4. Device node needs to be set up manually
Currently the driver cannot set up device node in the file system automatically.
mknod command is required each time the driver is loaded.


TODOs

1. Rewrite driver with sysfs framework for automatic device node setup
2. Integrate this module into kernel
3. Consider interacting with driver using read & write instead of ioctl?
